<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rafael Orion / Blog</title>
    <description>A virtual proof that I am awesome</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Domain Driven Design (DDD)</title>
        <description>
          
          

Comecei a ouvir falar de Domain Driven Design (ou DDD para os √≠ntimos) na  √©poca em que entrei no grupo de discu√ß√µes do DotNet Architects, percebi que tinha muita gente da comunidade falando a respeito e resolvi entender um pouco mais sobre esse tipo de arquitetura.

O DDD  √© um modelo de arquitetura proposto pelo Eric Evans apoiado por grandes gurus da inform√°tica, re√∫ne muitos aspectos j√° existentes formando um padr√£o que √© considerado por muitos como ‚Äúo retorno da orienta√ß√£o a objeto‚Äù.

O foco do DDD √© no Dom√≠nio (dom√≠nio √© todo o universo que envolve o seu problema), atrav√©s da utiliza√ß√£o de uma Linguagem Ubliqua e um Modelo Rico, ele tenta prover uma arquitetura clara que revele com facilidade as caracter√≠sticas e fun√ß√µes de cada elemento do seu sistema assim como a intera√ß√£o entre eles.

Linguagem Ubliqua (ou linguagem onipresente) trata-se da padroniza√ß√£o os termos usados na an√°lise e no desenvolvimento, linguagem comum utilizando os mesmos termos do negocio no desenvolvimento evitando modifica√ß√£o dos mesmos ou abuso de termos t√©cnicos n√£o correspondentes ao negocio .

Modelo Rico basicamente seria o uso de objetos com propriedades e  m√©todos, diferente do modelo an√™mico onde os objetos possuem somente propriedades, e os m√©todos com a regra de negocio concentram-se em classes diferente.

Para criar um bom software voc√™ tem que conhecer bem o cen√°rio, refletir o mundo real em c√≥digo n√£o √© algo f√°cil, e a utiliza√ß√£o de uma linguagem Ubliqua  ajuda bastante na hora de construir essa ponte entre o mundo real e as classes. Todos os envolvidos devem estar falando a mesma l√≠ngua, nada de ‚Äútecn√™s‚Äù que n√£o fa√ßa parte do dom√≠nio.

DDD √© ideal principalmente para dom√≠nios com regras de neg√≥cio complexas pois esse foco em separa√ß√£o de papeis, coes√£o e simplicidade ajuda e muito na hora de entender cada ponto do sistema para desenvolver e dar manuten√ß√£o.

Este padr√£o arquitetural √© constitu√≠do por alguns elementos, n√£o √© necess√°rio utilizar todos, tudo depende do seu cen√°rio; Alguns de seus elementos s√£o: Servi√ßos, Reposit√≥rios, Entidades, Objetos de Valor, Agregados, Factories, Modelo Rico,‚Ä¶

Brevemente vou descrever mais detalhadamente cada um de seus elementos.

Por mais que eu goste de DDD e acredite que √© uma arquitetura muito poderosa n√£o podemos dizer que ela veio para substituir as outras,  um arquiteto de verdade deve saber observar o problema antes de tudo e decidir a melhor arquitetura que se encaixa ao cen√°rio.

Gosto de trabalhar voltado a DDD de uma forma mais evolutiva, sem me prender logo de cara a todas suas recomenda√ß√µes, vou aplicando cada elemento conforme vai surgindo a necessidade.

E para quem quer se aprofundar no assunto recomendo a leitura do livro do Evans, tamb√©m tem um e-book gratuito sobre o assunto no infoQ alem da palestra do Giovanni Bassi sobre DDD que d√° uma boa ideia geral sobre o assunto.

Estrutura do DDD:



At√© a pr√≥xima.

        </description>
        <pubDate>Sun, 11 Mar 2012 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2012-03-11-domain-driven-design/</link>
        <guid isPermaLink="true">http://localhost:4000/2012-03-11-domain-driven-design/</guid>
      </item>
    
      <item>
        <title>Acessando propriedades de uma master page atrav√©s de uma content page</title>
        <description>
          Quick Tip - 
          

Agora vou dar uma dica bem simples de como acessar propriedades que est√£o em uma master page por uma de suas paginas filho.
Primeiramente vamos declarar uma propriedade publica na MasterPage:



Public String PropriedadePublica
{
       get { return (String)Session[&quot;PropriedadePublica&quot;]; }
       set { Session[&quot;PropriedadePublica&quot;] = value; }
}


Estou utilizando sessions para que os valores da propriedade n√£o sej√£o perdidos a cada postback.
J√° na pagina filha para que possamos enchergar a propriedade da masterPage √© preciso adicionar uma diretiva no aspx.

&amp;lt;% @MasterType VirtualPath=&quot;~/Site.master&quot; %&amp;gt;


Lembrando que o caminho informado deve ser o mesmo que na propriedade MasterPageFile.
Com isso j√° √© poss√≠vel acessar as propriedades de uma master page da seguinte forma:

lblTeste.Text = Master.PropriedadePublica;


Outra forma de acessar dados da Masterpage √© atav√©z de seus componentes;
Para isso basta usar o comando FindControl como no exemplo:

var teste = ((Label)Master.FindControl(&quot;lblTeste&quot;)).Text


At√© a pr√≥xima.

        </description>
        <pubDate>Tue, 28 Feb 2012 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2012-02-28-quicktip-acessando-propriedades-de-uma-master-page-atraves-de-uma-content-page/</link>
        <guid isPermaLink="true">http://localhost:4000/2012-02-28-quicktip-acessando-propriedades-de-uma-master-page-atraves-de-uma-content-page/</guid>
      </item>
    
      <item>
        <title>Utilizando MSMQ (Microsoft Message Queue) no C#</title>
        <description>
          
          

O MSMQ (Microsoft Message Queue) √© uma implementa√ßao da Microsoft presente desde o windows 95 para  o enfileiramento de Mensagens.

As filas trabalham com a politica  FIFO (First In First Out), ou seja, em uma fila podemos empilhar uma serie de mensagens, e sempre sera recuperado uma a uma come√ßando pela ultima que foi inserida.

O MSMQ trabalha de forma assincrona, possibilitando que diferentes aplica√ßoes comuniquem-se por meio de mensagens, o software envia as mensagens que ser√£o empilhadas em uma fila gerenciada pelo proprio windows at√© que o programa receptor va at√© la pegar as mensagens.

Tipos de Filas

No MSMQ podemos criar filas Publicas ou Privadas. As filas publicas podem ser acessadas apartir de qualquer computador que fa√ßa parte do mesmo Dominio atravez do Active Directory, j√° as filas privadas s√£o compartilhadas somente com os programas rodando na mesma maquina.

Transacional

Tambem podemos definir a fila como transacional ou n√£o, protegendo a inser√ßao e remo√ßao de mensagens em casos de erros.

Instalando o MSMQ

Para come√ßao a utilizar o MSMQ precisamos ir no ‚Äúpainel de controle‚Äù &amp;gt; ‚ÄúProgramas e Recursos‚Äù &amp;gt; ‚ÄúAtivar ou desativar recursos do Windows‚Äù e marcar o checkbox ‚ÄúServi√ßos do MSMQ (Microsoft Message Queue)‚Äù como na imagem abaixo.



M√£os a Obra

Primeiramente √© necess√°rio adicionar a referencia para o  ‚ÄúSystem.Messaging ‚Äù no projeto.

Como o MSMQ pode gerenciar varias filas quando formos criar/utilizar uma fila precisaremos dar um nome e caminho a ela.

Como no exemplo vou utilizar uma lista privada o caminho da lista deve ser ‚Äú.\Private$\‚Äù, caso estivese criando uma lista Publica o caminho seria o o nome do dominio da Rede. O caminho deve ser passado junto com o nome da nossa lista.

Criando/Abrindo uma lista

MessageQueue msg;
var qName = @&quot;.\Private$\teste_app&quot;;
if (MessageQueue.Exists(qName))
    msg = new MessageQueue(qName);
else
    msg = MessageQueue.Create(qName);


Essa lista pode receber qualquer tipo de objeto, porem devemos escolher entre 2 tipos de formato, pode ser uma classe serializada ou binario.
Lembrando que se optarmos pelo formato em binario tanto o programa que envia qnt o receptor deve fazer referencia para a mesma dll que contem o objeto.

No exemplo vou passar o seguinte objeto serializado.

[Serializable]
public class Job
{
    public int ID { get; set; }
    public String Nome { get; set; }
}


Vamos configurar o formato:

msg.Formatter = new XmlMessageFormatter(new Type[] { typeof(Job) });


Agora basta enviar o objeto para a fila

var obj = new CommomLib.Job(){ ID = 10 ,  Nome = &quot;Processo 1&quot; };
msg.Send(obj);


Para pegar um item da Lista a outra aplica√ßao devera primeiramente abrir a lista da mesma forma utilizada anteriormente, em seguida utilizar o seguinte c√≥digo:

var myMessage = msg.Receive();
Job myJob = (Job)myMessage.Body;


Pronto! simples, agora vamos parar de utilizar banco de dados para gerenciar filas ok üòâ

At√© a pr√≥xima. []s

        </description>
        <pubDate>Thu, 02 Feb 2012 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2012-02-02-utilizando-msmq/</link>
        <guid isPermaLink="true">http://localhost:4000/2012-02-02-utilizando-msmq/</guid>
      </item>
    
      <item>
        <title>Como adicionar confirma√ß√£o de exclus√£o em um ActionLink</title>
        <description>
          Quick Tip - 
          

Para adicionar uma confirma√ß√£o de exclus√£o ou qualquer alerta em um ActionLink do asp.Net MVC √© muito simples.


Segue um exemplo abaixo:

@Html.ActionLink(‚ÄúExcluir‚Äù, ‚ÄúDelete‚Äù, new { id = item.Id }, new { @onClick =  ‚Äújavascript:return ‚Äù + ‚Äúconfirm(‚ÄòConfirma a exclus√£o?‚Äô)‚Äù})


Em algumas sobrecargas o ActionLink recebe um Object para htmlAttributes, e √© nele que colocamos o nosso javascript para o atributo onClick.

Lembrando que tamb√©m podemos setar qualquer atributo html para o ActionLink dessa mesma forma.

At√© a pr√≥xima.

        </description>
        <pubDate>Wed, 28 Dec 2011 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2011-12-28-quicktip-como-adicionar-confirmacao-de-exclusao-em-um-actionlink/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-12-28-quicktip-como-adicionar-confirmacao-de-exclusao-em-um-actionlink/</guid>
      </item>
    
      <item>
        <title>Utilizando Tipos Nulos em c# (Nullable Types)</title>
        <description>
          
          

Em alguns casos precisamos trabalhar com tipos nulos, mas por padr√£o nem todos os tipos de vari√°veis aceitam, porem em c# √© muito simples criarmos vari√°veis que possam assumir valores nulos.

Nullable
Qualquer tipo pode passar a ser nullable , por exemplo uma vari√°vel do tipo int por padr√£o n√£o pode receber null, para resolver isso basta adicionar o operador ? logo depois do tipo desejado.
Declararmos da seguinte forma:

int? numero;
numero = null;

//ou

Nullable numero2;
numero2 = null;


Com isso criamos uma vari√°vel do tipo int nullable.

Utilizo bastante vari√°veis nullables  por exemplo quando quero passar um parametro bool? ativo em uma fun√ßao onde quando o valor  for True trarei todos os registros ativos, False todos os Inativos e Null para trazer todos os ativos e inativos.

Operador ??
O operador ?? apesar de pouco conhecido √© muito √∫til, com ele podemos verificar de forma r√°pida e elegante se uma vari√°vel possui valor nulo;

Exemplo:
int? numero = null;
int numero2 = numero??99;

string mensagem = null;
string mensagem2 = mensagem??&quot;Mensagem Nula&quot;;


Com isso caso o valor da vari√°vel que  antecede o operador ?? for nulo, ser√° atribuido o valor que est√° posterior ao operador ??, caso contrario ser√° atribuido o valor da vari√°vel em quest√£o.

Ele trabalha de forma bem parecida a um if tern√°rio:

int? numero = null;
int numero2 = numero == null ? 99 : numero;


Esse operador pode ser muito √∫til por exemplo em Getters para evitar retorno de um objeto n√£o instanciado:

private IList empresas;
public IList Empresas
{
    get { return empresas = empresas ?? new List(); }
    set { empresas = value; }
}


Ou quando precisamos reistanciar algum objeto caso esteja nulo.

repositorio = repositorio ?? new Repositorio();
//Somente ser√° reinstanciada caso sej√° nulo.


At√© a pr√≥xima.

[]s

        </description>
        <pubDate>Mon, 28 Nov 2011 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2011-11-28-utilizando-tipos-nulos-em-c-nullable-types/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-11-28-utilizando-tipos-nulos-em-c-nullable-types/</guid>
      </item>
    
      <item>
        <title>Consultando desempenho da maquina com o PerformanceCounter</title>
        <description>
          
          

Com o PerformanceCounter podemos obter diversas informa√ß√µes sobre o desempenho atual da maquina, como por exemplo quantidade de mem√≥ria em uso, espa√ßo livre no HD, processamento, etc.

Quando precisamos rodar um processo muito pesado em um servidor  atrav√©s de um servi√ßo  peri√≥dico muitas vezes vale a pena conferir a situa√ß√£o da maquina antes de iniciar o processo para evitar travamento do sistema. Ou ate mesmo utilizar essas  informa√ß√µes para criar um monitorador dos recursos, vai da sua necessidade e criatividade.

Vamos para o que interessa.

Para pegar informa√ß√µes b√°sicas sobre o uso de mem√≥ria, hd e processador √© muito simples, basta utilizar os seguintes comandos:

var cpu = new System.Diagnostics.PerformanceCounter(&quot;Processor&quot;, &quot;% Processor Time&quot;, &quot;_Total&quot;);
var memory = new System.Diagnostics.PerformanceCounter(&quot;Memory&quot;, &quot;% Committed Bytes In Use&quot;);
var hd = new System.Diagnostics.PerformanceCounter(&quot;PhysicalDisk&quot;, &quot;% Disk Time&quot;, &quot;_Total&quot;);

Console.WriteLine(&quot; % Uso do Processador: {0}&quot;, cpu.NextValue());
Console.WriteLine(&quot; % Uso de Mem√≥ria: {0}&quot;, memory.NextValue());
Console.WriteLine(&quot; % Acesso ao HD: {0}&quot;, hd.NextValue());


Para mais informa√ß√µes clique aqui

At√© a pr√≥xima.
[]s

        </description>
        <pubDate>Sun, 27 Nov 2011 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2011-11-27-consultando-desempenho-da-maquina-com-o-performancecounter/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-11-27-consultando-desempenho-da-maquina-com-o-performancecounter/</guid>
      </item>
    
      <item>
        <title>Debugando Windows Service</title>
        <description>
          
          

Hoje vou ensinar uma forma para debugar windows service.

Ao criarmos um projeto do tipo WindowsService n√£o conseguimos debugar normalmente como qualquer outro tipo de projeto, porem temos uma forma bem simples para contornar esse problema.

Primeiramente devemos criar uma condi√ß√£o na classe Program.cs para identificar se o nosso projeto foi executado em modo de Debug para redirecionarmos a chamada.

Program.cs

  static void Main()
  {

      if (System.Diagnostics.Debugger.IsAttached)
      {
          MeuServico service = new MeuServico();
          service.StartDebug(new string[2]);
          System.Threading.Thread.Sleep(System.Threading.Timeout.Infinite);

      }
      else
      {
          ServiceBase[] ServicesToRun;
          ServicesToRun = new ServiceBase[] { new MeuServico() };
          ServiceBase.Run(ServicesToRun);
      }
  }


Apos feito isso, basta editar a classe do nosso servi√ßo e adicionar um m√©todo StartDebug como no exemplo abaixo.

No service:

   public void StartDebug(string[] args)
   {
       OnStart(args);
   }


Como o M√©todo OnStarde √© do tipo protected criamos esse novo m√©todo publico para redirecionar a chamada.

Pronto! j√° podemos debugar nosso projeto normalmente sem nenhum problema.

[]s

        </description>
        <pubDate>Fri, 25 Nov 2011 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2011-11-25-debugando-windows-service/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-11-25-debugando-windows-service/</guid>
      </item>
    
      <item>
        <title>Como criar um actionLink para outra Area no Asp.Net MVC3</title>
        <description>
          Quick Tip - 
          

Fala ae galera.

Quando comecei a trabalhar com √°reas no asp.net MVC3 me deparei com essa situa√ß√£o de criar um link que aponte para uma √°rea diferente.
Apesar de ser algo simples fica a dica.

&amp;lt;%= Html.ActionLink(‚ÄúDescri√ß√£o do Link‚Äù, ‚ÄúNomeDaPagina‚Äù, new { area=‚ÄùNomeDaArea‚Äù, controller=‚ÄùNomeDoController‚Äù } )%&amp;gt;

Ou na sintaxe do Razor:

@Html.ActionLink(‚ÄúDescri√ß√£o do Link‚Äù, ‚ÄúNomeDaPagina‚Äù, new { area=‚ÄùNomeDaArea‚Äù, controller=‚ÄùNomeDoController‚Äù } )

Abra√ßos,

        </description>
        <pubDate>Thu, 24 Nov 2011 00:00:00 -0200</pubDate>
        <link>http://localhost:4000/2011-11-24-quicktip-como-criar-actionlink-para-areas-aspnetmvc/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-11-24-quicktip-como-criar-actionlink-para-areas-aspnetmvc/</guid>
      </item>
    
      <item>
        <title>Comandos do Nuget</title>
        <description>
          
          

No post anterior falei um pouco sobre o NuGet, agora vou listar alguns dos principais comandos para voc√™ utilizar no console do Visual Studio.

Para exibir o shell de comandos do NuGet, v√° no menu View/Other Windows/Package Manage Console.

A seguinte janela ir√° ficar  vis√≠vel:



No combo do lado esquerdo selecionamos qual ser√° nosso reposit√≥rio, por padr√£o ele busca da web mas podemos informar um reposit√≥rio privado.

No combo do lado direito selecionamos o projeto no qual as referencias ser√£o aplicadas.

Pesquisando um pacote pelo NuGet:

Para pesquisar um pacote, por exemplo o NHibernate basta digitar o seguinte comando:

PM&amp;gt; Get-Package nhibernate -remote

Esse comando trar√° todos os pacotes que possuem ‚ÄúNHibernate‚Äù no nome.

O parametro ‚Äú- remote‚Äù indica que o pacote ser√° pesquisado no reposit√≥rio selecionado em vez de buscar os pacotes instalados no projeto.

Adicionando refer√™ncia de um pacote ao Projeto:

Para adicionar a referencia de um pacote, por exemplo o FluentNhibernate:

PM&amp;gt; Install-Package fluentnhibernate

Esse comando instalar√° o fluent e todas suas  depend√™ncias, como por exemplo o NHibernate e Iesi.Collections, ele buscar√° sempre a vers√£o mais atual.

Para n√£o instalar as depend√™ncias basta adicionar o par√¢metro  ‚Äú-ignoreDependencies‚Äù

PM&amp;gt; Install-Package fluentnhibernate -IgnoreDependencies

Tamb√©m podemos informar qual vers√£o desejamos instalar com o par√¢metro  -Version

Removendo um pacote do Projeto:

Para remover uma referencia basta usar o comando:

PM&amp;gt; Uninstall-Package FluentNHibernate

Atualizando um pacote adicionado:

Para atualizar um pacote para a vers√£o mais recente:
PM&amp;gt; Update-Package FluentNHibernate

Para atualizar um pacote para uma vers√£o especifica:
PM&amp;gt; Update-Package FluentNHibernate -version 1.0.0

Listando os pacotes Instalados:

Para listar os pacotes instalados a l√≥gica √© a mesma de quando buscamos no reposit√≥rio, basta omitir o par√¢metro ‚Äú-remote‚Äù

Para listar todos instalados:
PM&amp;gt; Get-Package

Para buscar algum especifico:
PM&amp;gt; Get-Package nhibernate



A documenta√ß√£o completa em ingl√™s pode ser encontrada aqui.

Dica

O NuGet possui AutoComplete para auxiliar na digita√ß√£o dos comandos e nomes de pacotes, basta pressionar a tecla Tab depois de digitar o inicio do comando.

        </description>
        <pubDate>Thu, 15 Sep 2011 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2011-09-15-commandos-nuget/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-09-15-commandos-nuget/</guid>
      </item>
    
      <item>
        <title>Como zerar o valor de um campo Identity</title>
        <description>
          Quick Tip - 
          

Fala ae Galera.

Vou postar uma dica simples mas √∫til. Ao Criarmos uma coluna identity no Sql Server, mesmo depois de apagar todos os dados da tabela, ao inserirmos um novo registro ele continuar√° incrementando o valor desse campo a partir do ultimo valor inserido. Para zerar esse contador basta executar o seguinte script:

DBCC CHECKIDENT( ‚Äò [NOME_DA_TABELA] ‚Äò , RESEED, 0)

ex:
DBCC CHECKIDENT(‚ÄòFuncionarios‚Äô, RESEED, 0)

Tamb√©m podemos modificar esse valor para que comece a partir de algum numero espec√≠fico.

Ex:
DBCC CHECKIDENT(‚ÄòFuncionarios‚Äô, RESEED, 50)

Nesse caso o Pr√≥ximo registro inserido na tabela Funcion√°rios assumira o valor 51.

Abra√ßos,

Rafael Orion

        </description>
        <pubDate>Sun, 04 Sep 2011 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2011-09-04-quicktip-como-zerar-campo-identity-no-sql/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-09-04-quicktip-como-zerar-campo-identity-no-sql/</guid>
      </item>
    
      <item>
        <title>Nuget</title>
        <description>
          
          

NuGet √© um projeto open source para gerenciar pacotes na plataforma .NET.

Com o NuGet as tarefas de adicionar uma biblioteca,configurar e atualizar ficaram muito mais f√°ceis.  Basta buscar nele a biblioteca que deseja utilizar que far√° o trabalho de configurar seu ambiente e instalar todas as depend√™ncias necess√°rias deixando tudo bem organizado e centralizado.

Por padr√£o o NuGet buscar√° as refer√™ncias em um reposit√≥rio publico na internet, mas voc√™ tamb√©m pode montar um reposit√≥rio local na sua empresa para suas bibliotecas, e apontar o nuget para buscar a partir dela.

Por exemplo, para adicionar o FluentNhibernate em nosso projeto da forma convencional precisar√≠amos seguir os seguintes passos:


  Entrar no site do NHibernate e baixar a ultima vers√£o.
  Efetuar o download de todas as dlls dependentes, como por exemplo, o NHibernate.
  Descompactar e copiar a dll para o nosso projeto.
  Referenciar as dlls no projeto.
  Em alguns casos efetuar alguma configura√ß√£o no webconfig.
  E torcer para n√£o estar faltando nenhuma outra depend√™ncia.


Um pouco trabalhoso n√£o acham? Mas como far√≠amos isso utilizando o NuGet?

No visual studio (com o plug-in do NuGet instalado) basta abrir o Console do NuGet e digitar a seguinte linha de comando:

Install-Package FluentNHinernate

Pronto! J√° est√° funcionando!, Simples n√£o √© mesmo?

Ao executar esse comando, o NuGet vai at√© o seu reposit√≥rio publico na internet e busca a vers√£o mais recente do componente, todas suas depend√™ncias, efetua o download, joga em uma pasta chamada Packages dentro da sua solution e configura oque for necess√°rio.

Tamb√©m √© poss√≠vel especificar a vers√£o do componente que ser√° baixado, ignorar as depend√™ncias, remover pacotes, buscar por pacotes no reposit√≥rio, atualizar referencias do projeto para uma vers√£o mais recente, etc etc.

Para instalar o plug-in do NuGet, o projeto est√° hospedado no Github , l√° voc√™ vai encontrar o c√≥digo fonte, documenta√ß√£o, exemplos e o plug-in para o visual studio 2010.

A instala√ß√£o n√£o foge do padr√£o next, next , finish. E para visualizar o shell ap√≥s a instala√ß√£o v√° no menu do VisualStudio View/Other Windows/Package Manager Console.

Depois farei um novo post demonstrando os principais comandos.

Abra√ßos,
Rafael Orion

        </description>
        <pubDate>Sun, 04 Sep 2011 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2011-09-04-nuget/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-09-04-nuget/</guid>
      </item>
    
      <item>
        <title>Hello world!</title>
        <description>
          
          

Finalmente, depois de algum tempo enrrolando, resolvi tomar vergonha na cara e criar um blog pr√≥prio (depois de algumas experiencias em um blog com o pessoal da faculdade).

O objetivo √© compartilhar um pouco de conhecimento e dos meus estudos.

Let‚Äôs go!

        </description>
        <pubDate>Sun, 29 May 2011 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/2011-05-29-hello-world/</link>
        <guid isPermaLink="true">http://localhost:4000/2011-05-29-hello-world/</guid>
      </item>
    
  </channel>
</rss>
